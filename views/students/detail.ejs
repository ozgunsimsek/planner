<%- contentFor('body') %>

<head>
    <title>Öğrenci Detay - <%= student.name %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
    <style>
        /* Select2 özelleştirmeleri */
        .select2-container--bootstrap-5 .select2-selection {
            min-height: 38px;
        }
        .select2-container--bootstrap-5 .select2-selection--single {
            padding: 0.375rem 0.75rem;
        }
    </style>
</head>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="d-flex align-items-center">
        <a href="/students" class="btn btn-outline-secondary me-3">
            <i class="bi bi-arrow-left me-2"></i>
            Geri Dön
        </a>
        <h2 class="mb-0">
            <i class="bi bi-person me-2"></i>
            Öğrenci Detayı
        </h2>
    </div>
    <div>
        <a href="/print-template/<%= student.id %>" target="_blank" class="btn btn-primary">
            Plan Görüntüle
        </a>
    </div>
</div>

<!-- Öğrenci Bilgileri -->
<div class="card mb-4">
    <div class="card-body">
        <div class="d-flex align-items-center">
            <div class="profile-icon">
                <i class="bi bi-person"></i>
            </div>
            <div>
                <h3 class="card-title mb-1"><%= student.name %></h3>
                <p class="text-muted mb-0"><%= student.email %> | <%= student.grade %>. Sınıf</p>
            </div>
        </div>
    </div>
</div>

<!-- Ders Ekleme Formu -->
<div class="card mb-4">
    <div class="card-header">
        <h4 class="mb-0">
            <i class="bi bi-plus-circle me-2"></i>
            Ders Ekle
        </h4>
    </div>
    <div class="card-body">
        <form id="addSubjectForm" class="row g-3">
            <div class="col-md-5">
                <label class="form-label">Ders</label>
                <select class="form-select subject-select" id="subjectSelect" required>
                    <option value="">Ders Seçin</option>
                    <% if (global.testData.subjects && global.testData.subjects.length > 0) { %>
                        <% global.testData.subjects.forEach(function(subject) { %>
                            <option value="<%= subject.title %>"><%= subject.title %></option>
                        <% }); %>
                    <% } %>
                </select>
            </div>
            <div class="col-md-5">
                <label class="form-label">Konu</label>
                <select class="form-select topic-select" id="topicSelect" required>
                    <option value="">Konu Seçin</option>
                </select>
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="submit" class="btn btn-primary w-100">
                    <i class="bi bi-plus-lg me-2"></i>
                    Ekle
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Haftalık Plan -->
<div class="card">
    <div class="card-header">
        <h4 class="mb-0">
            <i class="bi bi-calendar-week me-2"></i>
            Haftalık Plan
        </h4>
    </div>
    <div class="card-body">
        <div id="subjectsContainer" class="mb-4">
            <% if (student.weeklySchedule && student.weeklySchedule[0] && student.weeklySchedule[0].subjects) { %>
                <% student.weeklySchedule[0].subjects.forEach((subject, subjectIndex) => { %>
                    <div class="subject-row d-flex align-items-center gap-3 mb-3">
                        <div class="subject-number">
                            <span class="badge bg-primary"><%= subjectIndex + 1 %></span>
                        </div>
                        <div class="flex-grow-1">
                            <input type="text" 
                                   name="subjects[<%= subjectIndex %>][subject]" 
                                   value="<%= subject.subject %>"
                                   class="form-control"
                                   placeholder="Ders adı"
                                   onchange="autoSave()">
                        </div>
                        <div class="flex-grow-1">
                            <input type="text" 
                                   name="subjects[<%= subjectIndex %>][notes]" 
                                   value="<%= subject.notes %>"
                                   class="form-control"
                                   placeholder="Notlar"
                                   onchange="autoSave()">
                        </div>
                        <button type="button" 
                                onclick="duplicateSubject(this)"
                                class="btn btn-outline-primary me-2">
                            <i class="bi bi-plus-circle"></i>
                        </button>
                        <button type="button" 
                                onclick="removeSubject(this)"
                                class="btn btn-outline-danger">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                <% }) %>
            <% } %>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
// Ders-Konu eşleştirmeleri - JSON'dan gelen verilerle oluştur
const subjectsData = <%- JSON.stringify(global.testData.subjects || []) %>;
const subjectTopics = {};
if (subjectsData && subjectsData.length > 0) {
    subjectsData.forEach(subject => {
        subjectTopics[subject.title] = subject.values;
    });
}

// Ders listesi - JSON'dan gelen verilerle oluştur
const subjectsList = subjectsData && subjectsData.length > 0 ? subjectsData.map(subject => subject.title) : [];

// Ders numaralarını güncelle (ders + konu bazında gruplama)
function updateSubjectNumbers() {
    const container = document.getElementById('subjectsContainer');
    const rows = container.getElementsByClassName('subject-row');
    
    // Ders + konu bazında numaralandırma için gruplama
    const subjectGroups = {};
    Array.from(rows).forEach((row, index) => {
        const inputs = row.getElementsByTagName('input');
        const subjectName = inputs[0].value.trim();
        const notes = inputs[1].value.trim();
        
        // Ders + konu kombinasyonuna göre grupla
        const groupKey = `${subjectName}|${notes}`;
        if (!subjectGroups[groupKey]) {
            subjectGroups[groupKey] = [];
        }
        subjectGroups[groupKey].push({ row, index });
    });
    
    // Her ders + konu grubu için numaralandırma yap
    Object.keys(subjectGroups).forEach(groupKey => {
        subjectGroups[groupKey].forEach((item, groupIndex) => {
            const badge = item.row.querySelector('.subject-number .badge');
            if (badge) {
                badge.textContent = groupIndex + 1;
            }
        });
    });
}

// Tüm ders verilerini güncelle (input isimleri + numaralar)
function updateAllSubjectData() {
    const container = document.getElementById('subjectsContainer');
    const rows = container.getElementsByClassName('subject-row');
    
    // Input isimlerini güncelle
    Array.from(rows).forEach((row, index) => {
        const inputs = row.getElementsByTagName('input');
        inputs[0].name = `subjects[${index}][subject]`;
        inputs[1].name = `subjects[${index}][notes]`;
    });
    
    // Numaraları güncelle
    updateSubjectNumbers();
}

// Ders seçildiğinde konuları güncelle
document.getElementById('subjectSelect').addEventListener('change', function() {
    const topicSelect = document.getElementById('topicSelect');
    const selectedSubject = this.value;
    
    // Konu seçimini sıfırla
    topicSelect.innerHTML = '<option value="">Konu Seçin</option>';
    
    if (selectedSubject && subjectTopics[selectedSubject]) {
        subjectTopics[selectedSubject].forEach(topic => {
            const option = document.createElement('option');
            option.value = topic;
            option.textContent = topic;
            topicSelect.appendChild(option);
        });
    }
});

// Yeni ders ekleme
document.getElementById('addSubjectForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const subject = document.getElementById('subjectSelect').value;
    const topic = document.getElementById('topicSelect').value;
    
    if (!subject || !topic) return;
    
    const container = document.getElementById('subjectsContainer');
    const subjectCount = container.children.length;
    
    const subjectRow = document.createElement('div');
    subjectRow.className = 'subject-row d-flex align-items-center gap-3 mb-3';
    subjectRow.innerHTML = `
        <div class="subject-number">
            <span class="badge bg-primary">${subjectCount + 1}</span>
        </div>
        <div class="flex-grow-1">
            <input type="text" 
                   name="subjects[${subjectCount}][subject]" 
                   value="${subject}"
                   class="form-control"
                   placeholder="Ders adı"
                   onchange="autoSave()">
        </div>
        <div class="flex-grow-1">
            <input type="text" 
                   name="subjects[${subjectCount}][notes]" 
                   value="${topic}"
                   class="form-control"
                   placeholder="Notlar"
                   onchange="autoSave()">
        </div>
        <button type="button" 
                onclick="duplicateSubject(this)"
                class="btn btn-outline-primary me-2">
            <i class="bi bi-plus-circle"></i>
        </button>
        <button type="button" 
                onclick="removeSubject(this)"
                class="btn btn-outline-danger">
            <i class="bi bi-trash"></i>
        </button>
    `;
    
    container.appendChild(subjectRow);
    
    // Tüm numaraları yeniden düzenle
    updateSubjectNumbers();
    
    // Formu sıfırla
    this.reset();
    
    // Select2'leri sıfırla
    $('#subjectSelect').val('').trigger('change');
    $('#topicSelect').val('').trigger('change');
    
    // Konu seçimini sıfırla
    document.getElementById('topicSelect').innerHTML = '<option value="">Konu Seçin</option>';
    $('#topicSelect').select2('destroy').select2({
        theme: 'bootstrap-5',
        width: '100%',
        placeholder: 'Seçiniz...',
        allowClear: true,
        dropdownAutoWidth: true,
        openOnEnter: false
    });

    // Otomatik kaydet
    await autoSave();
});

// Ders çoğaltma
async function duplicateSubject(button) {
    const row = button.closest('.subject-row');
    const inputs = row.getElementsByTagName('input');
    const subject = inputs[0].value.trim();
    const notes = inputs[1].value.trim();
    
    if (!subject) return; // Ders adı yoksa çoğaltma
    
    const container = document.getElementById('subjectsContainer');
    const allRows = Array.from(container.getElementsByClassName('subject-row'));
    
    // Aynı grubun (ders+konu) en son elemanını bul
    const groupKey = `${subject}|${notes}`;
    let insertIndex = allRows.length; // Varsayılan olarak en sona
    
    for (let i = 0; i < allRows.length; i++) {
        const currentRow = allRows[i];
        const currentInputs = currentRow.getElementsByTagName('input');
        const currentSubject = currentInputs[0].value.trim();
        const currentNotes = currentInputs[1].value.trim();
        const currentGroupKey = `${currentSubject}|${currentNotes}`;
        
        // Aynı grup bulunduğunda, bir sonraki farklı grubun başlangıcını bul
        if (currentGroupKey === groupKey) {
            // Bu grubun son elemanını bul
            for (let j = i + 1; j < allRows.length; j++) {
                const nextRow = allRows[j];
                const nextInputs = nextRow.getElementsByTagName('input');
                const nextSubject = nextInputs[0].value.trim();
                const nextNotes = nextInputs[1].value.trim();
                const nextGroupKey = `${nextSubject}|${nextNotes}`;
                
                if (nextGroupKey !== groupKey) {
                    insertIndex = j;
                    break;
                }
            }
            break;
        }
    }
    
    // Yeni satır oluştur
    const newSubjectRow = document.createElement('div');
    newSubjectRow.className = 'subject-row d-flex align-items-center gap-3 mb-3';
    newSubjectRow.innerHTML = `
        <div class="subject-number">
            <span class="badge bg-primary">1</span>
        </div>
        <div class="flex-grow-1">
            <input type="text" 
                   name="subjects[0][subject]" 
                   value="${subject}"
                   class="form-control"
                   placeholder="Ders adı"
                   onchange="autoSave()">
        </div>
        <div class="flex-grow-1">
            <input type="text" 
                   name="subjects[0][notes]" 
                   value="${notes}"
                   class="form-control"
                   placeholder="Notlar"
                   onchange="autoSave()">
        </div>
        <button type="button" 
                onclick="duplicateSubject(this)"
                class="btn btn-outline-primary me-2">
            <i class="bi bi-plus-circle"></i>
        </button>
        <button type="button" 
                onclick="removeSubject(this)"
                class="btn btn-outline-danger">
            <i class="bi bi-trash"></i>
        </button>
    `;
    
    // Doğru konuma ekle
    if (insertIndex >= allRows.length) {
        container.appendChild(newSubjectRow);
    } else {
        container.insertBefore(newSubjectRow, allRows[insertIndex]);
    }
    
    // Tüm input isimlerini ve numaraları yeniden düzenle
    updateAllSubjectData();
    
    // Otomatik kaydet
    await autoSave();
}

// Ders silme
async function removeSubject(button) {
    const row = button.closest('.subject-row');
    row.remove();
    
    // Tüm ders verilerini güncelle
    updateAllSubjectData();

    // Konu seçimini sıfırla
    const topicSelect = document.getElementById('topicSelect');
    topicSelect.innerHTML = '<option value="">Konu Seçin</option>';
    $('#topicSelect').select2('destroy').select2({
        theme: 'bootstrap-5',
        width: '100%',
        placeholder: 'Seçiniz...',
        allowClear: true,
        dropdownAutoWidth: true,
        openOnEnter: false
    });

    // Otomatik kaydet
    await autoSave();
}

async function autoSave() {
    const container = document.getElementById('subjectsContainer');
    const rows = container.getElementsByClassName('subject-row');
    const subjects = [];

    Array.from(rows).forEach(row => {
        const inputs = row.getElementsByTagName('input');
        const subject = inputs[0].value.trim();
        const notes = inputs[1].value.trim();
        
        if (subject) {
            subjects.push({ subject, notes });
        }
    });

    // Ders adı değişikliklerinde numaraları güncelle
    updateSubjectNumbers();

    try {
        const response = await fetch(`/students/<%= student.id %>/schedule`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ subjects })
        });
        
        if (!response.ok) {
            console.error('Program kaydedilirken bir hata oluştu');
        }
    } catch (error) {
        console.error('Hata:', error);
    }
}

// Select2'yi başlat
$(document).ready(function() {
    // Select2 için ortak ayarlar
    const select2Config = {
        theme: 'bootstrap-5',
        width: '100%',
        placeholder: 'Seçiniz...',
        allowClear: true,
        dropdownAutoWidth: true,
        openOnEnter: false
    };

    // Select2'yi başlat ve focus event'ini ekle
    function initSelect2($select) {
        $select.select2(select2Config)
            .on('select2:open', function() {
                // Dropdown açıldığında arama kutusuna focus ol
                setTimeout(function() {
                    const searchField = document.querySelector('.select2-search__field');
                    if (searchField) {
                        searchField.focus();
                        searchField.click();
                    }
                }, 100);
            });
    }

    // İlk select'leri başlat
    $('.subject-select, .topic-select').each(function() {
        initSelect2($(this));
    });

    // Ders seçildiğinde konuları güncelle
    $('#subjectSelect').on('select2:select', function(e) {
        const topicSelect = $('#topicSelect');
        const selectedSubject = e.target.value;
        
        // Önce mevcut Select2 instance'ını yok et
        topicSelect.select2('destroy');
        
        // Konuları güncelle
        topicSelect.empty().append('<option value="">Konu Seçin</option>');
        
        if (selectedSubject && subjectTopics[selectedSubject]) {
            subjectTopics[selectedSubject].forEach(topic => {
                topicSelect.append(new Option(topic, topic));
            });
        }
        
        // Select2'yi yeniden başlat
        initSelect2(topicSelect);
    });

    // Ders seçimi değiştiğinde konuları güncelle
    $('#subjectSelect').on('change', function() {
        const topicSelect = $('#topicSelect');
        const selectedSubject = $(this).val();
        
        // Önce mevcut Select2 instance'ını yok et
        topicSelect.select2('destroy');
        
        // Konuları güncelle
        topicSelect.empty().append('<option value="">Konu Seçin</option>');
        
        if (selectedSubject && subjectTopics[selectedSubject]) {
            subjectTopics[selectedSubject].forEach(topic => {
                topicSelect.append(new Option(topic, topic));
            });
        }
        
        // Select2'yi yeniden başlat
        initSelect2(topicSelect);
    });
});

// Yeni ders satırı eklerken Select2'yi başlat
function addSubject() {
    const subjectRows = document.querySelectorAll('.subject-row');
    const newIndex = subjectRows.length;
    
    const newRow = document.createElement('div');
    newRow.className = 'subject-row row mb-3';
    newRow.innerHTML = `
        <div class="col-md-5">
            <select class="form-select subject-select" name="subjects[${newIndex}][subject]" onchange="updateTopics(this)">
                <option value="">Ders Seçin</option>
                ${subjectsList.map(subject => `<option value="${subject}">${subject}</option>`).join('')}
            </select>
        </div>
        <div class="col-md-5">
            <select class="form-select topic-select" name="subjects[${newIndex}][topic]">
                <option value="">Konu Seçin</option>
            </select>
        </div>
        <div class="col-md-2">
            <button type="button" class="btn btn-danger" onclick="removeSubject(this)">Sil</button>
        </div>
    `;
    
    document.getElementById('subjectsContainer').appendChild(newRow);
    
    // Yeni eklenen select'ler için Select2'yi başlat
    const $newRow = $(newRow);
    $newRow.find('.subject-select, .topic-select').each(function() {
        initSelect2($(this));
    });

    // Yeni eklenen ders seçimi için event listener ekle
    $newRow.find('.subject-select').on('select2:select', function(e) {
        const $topicSelect = $newRow.find('.topic-select');
        const selectedSubject = e.target.value;
        
        // Önce mevcut Select2 instance'ını yok et
        $topicSelect.select2('destroy');
        
        // Konuları güncelle
        $topicSelect.empty().append('<option value="">Konu Seçin</option>');
        
        if (selectedSubject && subjectTopics[selectedSubject]) {
            subjectTopics[selectedSubject].forEach(topic => {
                $topicSelect.append(new Option(topic, topic));
            });
        }
        
        // Select2'yi yeniden başlat
        initSelect2($topicSelect);
    });
}

// Konuları güncellerken Select2'yi güncelle
function updateTopics(select) {
    const $row = $(select).closest('.subject-row');
    const $topicSelect = $row.find('.topic-select');
    const subject = select.value;
    
    // Önce mevcut Select2 instance'ını yok et
    $topicSelect.select2('destroy');
    
    // Konuları güncelle
    $topicSelect.empty().append('<option value="">Konu Seçin</option>');
    
    if (subject && subjectTopics[subject]) {
        subjectTopics[subject].forEach(topic => {
            $topicSelect.append(new Option(topic, topic));
        });
    }
    
    // Select2'yi yeniden başlat
    initSelect2($topicSelect);
}


</script> 